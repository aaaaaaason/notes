* These are the study notes for Nginx:

* main
   - Call ngx_get_options(int argc, char * const *argv)
       * This function scans all argv and do parsing, it's a while loop with switch case to check -c, -g, -t, ...
       * Indicators like ngx_show_version, ngx_test_config, ... are set here
   - Call ngx_time_init(void)
       * This function set ngx_cached_err_log_time.len, ngx_cached_http_time.len, ngx_cached_http_log_time.len to values sucha as sizeof("1970/09/28 12:00:00") - 1;
       * It calls ngx_time_update(), basically this function gets current time and turns this time to GMT time with specified formats and then write back into each cached time array.
       * Each time we call ngx_time_update, slot will be incremented and new values will be written into cached_http_time[slot], cached_err_log_time[slot] ...
   - Call ngx_pcre_init(void)
       * Assign pcre_malloc = ngx_regex_malloc and pcre_free = ngx_regex_free, assign functions to function pointers
   - Get current pid, ppid and call ngx_log_init, ngx_ssl_init, and initialize init_cycle
   - Call ngx_save_argv, this function saves argc to ngx_argc and argv array to ngx_argv
   - Call ngx_process_options, it sets cycle->conf_prefix and cycle->prefix and cycle->conf_params, from the command line arguments -p (configuration file path), -g (command directives)
   - Call ngx_os_init(ngx_log_t *log)
       * Get ngx_pagesize, ngx_cacheline_size, ngx_pagesize_shift, ngx_ncpu, RLIMT_NOFILE (one greater than the maximun number of fd a process can own) to ngx_max_sockets, ngx_inherited_blocking
   - Call ngx_crc32_table_init(void)
       * This function checks ngx_crc32_table_short aligning ngx_cacheline_size, otherwise we reallocates a new table to meet this requirement 
   - Call ngx_slab_sizes_init(void)
       * Set ngx_slab_max_size as ngx_pagesize / 2, ngx_slab_exact_size as ngx_pagesize / (8 * sizeof(uintptr_t)) and ngx_slab_exact_shift   
   - Call ngx_add_inherited_sockets(ngx_cycle_t *cycle)
       * Get environment variable "NGINX", if there's no this value, return it, otherwise we discover sockets from "NGINX" and set them into cycle->listening, and then call ngx_set_inherited_sockets    
   - Call ngx_preinit_modules(void)
       * Update ngx_modules[i]->index, ngx_modules[i]->name, ngx_modules_n, ngx_max_module, we get all modules from objs/ngx_modules.c, ngx_module_names[i]
   - Call ngx_init_cycle(ngx_cycle_t *old_cycle)
       * Set cycle->pool, cycle->log, cycle->old_cyclc, conf_prefix, prefix, conf_file, conf_param, path from old_cycle
       * Init conf_dump_rbtree, open_files, shared_memory, listening (some from old cycle), reusable_connections_queue, config_ctx (this is module related variable), ...
       * For all core modules, if it has registered create_conf function, then we call it here and set cycle->conf_ctx[cycle->modules[i]->index] = "result of create_conf"
       * Init a conf variable, and pass it into ngx_conf_param, ngx_conf_parse, these function are complicated but it shows loop to extract information from configuration files ...
       * For all core modules, it it has registered init_conf function, then we call it here
       * Call ngx_test_lockfile, ngx_create_paths, ngx_log_open_default
       * Open cycle->open_files.part->elts
       * Create shared memory, and we reuse old shared memory if permissible, need carefully read here ...
       * Handle listening sockets here, reuse old sockets to new cycle, then we call ngx_open_listening_sockets and ngx_config_listening_sockets
       * Close and delete stuff from old cycle, such as shared memory, listening sockets, ...
       * This function is too complicated ... I need more study ...
   - Check if ngx_test_config is set and output log or dump config ...
   - if ngx_signal is set, this is set by command line 's' argument, then call ngx_signal_process(cycle, ngx_signal)
       * This function opens the pidfile and read pid, then calls ngx_os_signal_process, this function will call kill ...
   - Assign ngx_cycle = cycle
   - Call ngx_init_signals(ngx_log_t * log), this function scan "signals" array and call sigaction
   - Call ngx_daemon if !inherited && ccf->daemon (seems true), create a new process and exit the original process, and it sets ngx_daemonized = 1 (used in ngx_signal_handler) ...
   - Call ngx_create_pidfile and ngx_log_redirect_stderr
   - Call ngx_master_process_cycle (if ngx_process != NGX_PROCESS_SINGLE)
* ngx_master_process_cycle(ngx_cycle_t *cycle)
   - Block the following signal first, SIGCHLD, SIGALRM, SIGIO, SIGINT, NGX_RECONFIGURE_SIGNAL, NGX_REOPEN_SIGNAL, NO_ACCEPT_SIGNAL, TERMINATE, SHUTDOWN, CHANGEBIN ...
   - Call ngx_setproctitle, seems like this function is for printing log, it shows process name and argv ... 
   - Get ngx_core_module config and then call ngx_start_worker_processes NGX_RESPAWN and ngx_process_cache_manager_processes(0)
   - then we go into a infinite loop:
       * If delay is set, call setitimer for it, ITIMER_REAL is used and SIGALRM is used
       * Call sigsuspend with unblocking all signals, so this process hangs here
       * After invoked by any signal, call ngx_time_update, and log the arriving signal
       * If ngx_reap is set, call live = ngx_reap_children
       * Call ngx_master_process_exit if ngx_terminate or ngx_quit is set, and !live
       * If ngx_terminate is set, it  may call ngx_signal_worker_processes using SIGKILL (delay > 1000) or NGX_TERMINATE_SIGNAL, then continue;
       * If ngx_quit is set, call ngx_signal_worker_processes using NGX_SHUTDOWN_SIGNAL, close all listening sockets (cycle->listening.elts), then continue;
       * If ngx_reconfigure is set:
          - If ngx_new_binary is set, call ngx_start_worker_processes with NGX_PROCESS_RESPAWN, ngx_start_cache_manager_processes(0), then continue;
          - Otherwise, create a new cycle and call ngx_start_worker_processes with NGX_PROCESS_JUST_RESPAWN, ngx_start_cache_manager_processes(1), sleep 100m and call signal NGX_SHUTDOWN_SIGNAL
       * If ngx_restart is set, NGX_PROCESS_RESPAWN, cache_manger_processes(0)
       * If ngx_reopen is set, ngx_reopen_files and signal NGX_REOPEN_SIGNAL
       * If ngx_change_binary is set, call ngx_new_binary = ngx_exec_new_binary
       * If ngx_noaccept is set, ngx_accepting = 1, signal NGX_SHUTDOWN_SIGNAL 
* ngx_signal_handler(int signo, siginfo_t *siginfo, void *ucontext)
   - Call ngx_time_sigsafe_update, it gets ngx_time_lock and update cached_err_log_time and cached_syslog_time
   - Then if current process is NGX_PROCESS_MASTER or NGX_PROCESS_SINGLE, depending on the signal type we may set ngx_quit, ngx_terminate, ngx_noaccept, ngx_reconfigure, ngx_reopen, ...
   - If current process is NGX_PROCESS_WORKER or NGX_PROCESS_HELPER, then we may set ngx_debug_quit, ngx_quit, ngx_terminate, ngx_reopen
   - It seems like signals for PROCESS_MASTER or NGX_PROCESS_SINGLE are only triggered in main()
* ngx_start_worker_processes(ngx_cycle_t *cycle, ngx_int_t n, ngx_int_t type)
   - Create ccf->worker_processes by calling ngx_spawn_process and after it we call ngx_pass_open_channel
* ngx_spawn_process(ngx_cycle_t *cycle, ngx_spawn_proc_pt proc, void *date, char *name, ngx_int_t respawn)
   - If respawn != NGX_PROCESS_DETACHED, call socketpair(AF_UNIX, SOCK_STREAM, ngx_processes[s].channel), then set 2 channels as nonblocking, FD_CLOEXEC, channel 0 as FIOASYNC, F_SETOWN, 
     and set ngx_channel = ngx_processes[s].channel[1], ngx_process_slot = s
   - Fork, for parent process it starts updating ngx_processes[s].pid, .exited, .proc, .data, .exiting, .respawn, .just_respawn, .detached, increments ngx_last_process and return
   - Fro newly created process set ngx_parent, ngx_pid and call ngx_worker_process_cycle    
* ngx_pass_open_channel(ngx_cycle_t *cycle, ngx_channel_t *ch)
   - Find all existing channel except ourselves, call ngx_write_channel and it calls sendmsg to send ch to those processes (why?)
* mgx_worker_process_cycle(ngx_cycle_t *cycle, void *data)
   - Set worker = data, ngx_process = NGX_PROCESS_WORKER, ngx_worker = worker and then call ngx_worker_process_init
   - Then we get into an infinite loop:
       * if ngx_exiting is set and ngx_event_no_timer_left, call ngx_worker_process_exit
       * call ngx_process_events_and_timers
       * if ngx_terminate is set, call ngx_worker_process_exit
       * if ngx_quit is set and not exiting, set ngx_exiting = 1, ngx_set_shutdown_timer, ngx_close_listening_sockets, ngx_close_idle_connections
       * if ngx_reopen, call ngx_reopen_files
* ngx_worker_process_init(ngx_cycle_t *cycle, ngx_int_t worker)
   - Read configuration ccf from mgx_core_module, then calls setpriority, setrlimit (RLIMIT_NOFILE, RLIMIT_CORE), setgid, initgroups, prctl, setuid, syscall(SYS_capset), ngx_setaffinity (CPU)
   - Keep setting, prctl(PR_SET_DUMPABLE), chdir, sigprocmask (empty)
   - For i < cycle->listening.nelts, ls[i]->previous = NULL, for all modules and call cycle->modules[i]->init_process
   - Close channel 1 for other processes and close channel 0 for own process
   - Call ngx_add_channel_event(cycle, ngx_channel, NGX_READ_EVENT, ngx_channel_handler)               
* ngx_process_events_and_timers(ngx_cycle_t *cycle)
   - if ngx_timer_resolution is set (only in ngx_event_module_init), set timer as NGX_TIMER_INFINITE and reset flag, otherwise call timer = ngx_event_update_timer, flags = NGX_UPDATE_TIME
   - ngx_event_update_timer finds the leftmost node and returns max(node->key - ngx_current_msec, 0)
   - if ngx_use_accept_mutex is set (from internet it seems like it's the default case, but we should close it when we need larger throughput), countdown ngx_accept_disable
     and when it's 0 we call mgx_trylock_accept_mutex
   - if ngx_accept_mutex_held (got the mutex), flags |= NGX_POST_EVENTS, else set timer <= ngx_accept_mutex_delay (not got the mutex)
   - Call ngx_process_events, which actually is ngx_event_actions.process_events, ngx_event_actions can be set to ngx_epoll_module_ctx.actions in ngx_epoll_init
   - Record the elapsed time for event processing
   - Call ngx_event_process_posted(cycle, ngx_posted_accept_events), this function read all events from ngx_posted_accept_events and run its handler
   - Call ngx_shmtx_unlock if ngx_accept_mutex_held is set
   - if there's time change after previous ngx_process_events, call ngx_event_expires_timers, this function loops the redblack tree ngx_event_timer_rbtree and remove time-out nodes,
     removed nodes will call the handlers, once the smallest node is not time-out, we break this loop      
   - we call ngx_event_process_posted(cycle, ngx_posted_events) 
* ngx_epoll_process_events(ngx_cycle_t *cycle, ngx_msec_t timer, ngx_uint_t flags)
   - epoll_wait(ep, event_list, nevents, timer) is called
   - Call ngx_time_update
   - if epoll_wait returns NGX_EINTR directly return NGX_OK, other cases we return NGX_ERROR
   - directly return with NGX_OK if there's no poll event after timeout
   - Then for each event, we start doing the following things:
       * if this event is EPOLLIN, set rev->ready = 1, if flags & NGX_POST_EVENTS, check if rev->accept ? and call ngx_post_event using &ngx_posted_accept_events or &ngx_posted_events
         else we directly call rev->handler(rev)
       * if this event is EPOLLOUT, set wev->ready = 1, if flags & NGX_POST_EVENTS, we call ngx_post_event(wev, &ngx_posted_events), else we directly call wev->handler(wev) 
   - We return this function after processing all poll events     
* ngx_trylock_accept_mutex(ngx_cycle_t *cycle)
   - if we can get ngx_shmtx_trylock(&ngx_accept_mutex), set ngx_accept_events = 0 and ngx_accept_mutex_held = 1 and return with NGX_OK
   - if we cannot get the accept_mutex then we set ngx_accept_mutex_held = 0   
   - ngx_accept_mutex is created using mmap, and it's created in ngx_init_cycle, so all worker processes share this mutex
* ngx_start_cache_manager_processes(ngx_cycle_t *cycle, ngx_uint_t respawn)
   - scan path = ngx_cycle->path.elts if no path[i]->manager = 1, then we return
   - call ngx_spawn_process with routine ngx_cache_manager_process_cycle with data = &ngx_cache_manager_ctx
   - if no path[i]->loader = 1, then we return or call ngx_cache_manager_process_cycle with data = &ngx_cache_loader_ctx   
* ngx_event_module_init(ngx_cycle_t *cycle)
   - set ngx_timer_resolution, set shm.size, size is multiple of 128 and each field owns one 128 byte, we call ngx_shm_alloc and it uses mmap to create a shared, anonymous map region
   - call ngx_shm_create for ngx_accept_mutex, internally it calls sem_init(&mtx->sem, 1, 0), shared between processes
   - Assign global pointers ngx_connection_counter = (ngx_atomic_t *) (shared + 1 * cl), ngx_temp_number = (ngx_atomic_t *)(shared + 2 * cl), ngx_random_number, ngx_stat_accepted,
     ngx_stat_handled, ngx_stat_requests, ngx_stat_active ...
* ngx_event_process_init(ngx_cycle_t *cycle)
   - set ngx_use_accept_mutex, ngx_accept_mutex_held and ngx_accept_mutex_delay, initialize ngx_posted_accept_events and ngx_posted_events
   - call ngx_event_timer_init, this is the rbtree ngx_event_timer_rbtree
   - call module->actions.init for event module specified in ecf->use          
   - ngx_timer_resolution is set and !(ngx_event_flag & NGX_USE_TIMER_EVENT), set ngx_timer_signal_handler as SIGALRM handler and call setitimer(ngx_timer_reolution/1000 ...)
   - if ngx_event_flag & NGX_USE_FD_EVENT, initialize cycle->files_n = rlmt.rlim_cur, cycle_files = ngx_calloc(sizeof(ngx_connection_t *) * cycle->files_n, cycle->log) (seems like for devpoll, poll)
   - initialize cycle->connections, cycle->read_events, cycle->write_events using cycle->connection_n, then link to cycle->free_connections and set cycle->free_connection_n
   - for i < cycle->listening.nelts (initialzied in ngx_http_block), call ngx_get_connection to get a free connection and initalize it using cycle-listening.elts[i], set rev->accept = 1 ...
       * if !(ngx_event_flags & NGX_USE_IOCP_EVENT) and cycle->listening.elts[i].previous is set, call ngx_del_event te remove ls[i].previous->connection
       * set rev->handler = (c->type == SOCK_STREAM)? ngx_event_accept : ngx_event_recvmsg
       * if ngx_use_accept_mutex, continue; 
       * if ngx_event_flags & NGX_USE_POLL_EVENT and worker_process > 1, call ngx_add_event(rev, NGX_READ_EVENT, NGX_EXCLUSIVE_EVENT)
       * call ngx_add_event(rev, NGX_READ_EVENT, 0)
* ngx_epoll_add_event(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags)
   - if event is NGX_READ_EVENT and this function is called, then assign e = ev->data->write, it checks if this event was active and then OR the previous event flag to current flag
   - same as above, if event is NGX_WRITE_EVENT and this function is called, then assign e = ev->data->read and if e->active = 1, then we need to OR the read flag
   - if e->active = 1, we use EPOLL_CTL_MOD, otherwise we use EPOLL_CTL_ADD, then we call epoll_ctl to update current fd, and finally we set e->active = 1
* ngx_epoll_del_event(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags)
   - if flags & NGX_CLOSE_EVENT, set e->active = 0 and return; because when the fd is closed, epoll will automatically delete it
   - Otherwise the remaining part is similar to ngx_epoll_add_event, we call epoll_ctl to update current fd but we set e->active = 0 in the end   
* ngx_epoll_add_connection(ngx_connection_t *c)
   - set epoll_event ee = EPOLLIN|EPOLLOUT|EPOLLET(edge_triggered, it can wait event there's still data unread in the buffer)|EPOLLRDHUP(socket peer close connection)
   - set ee.data.ptr has the information of c and c->read->instance
   - call epoll_ctl with EPOLL_CTL_ADD and set c->read->active and c->write->active = 1
* ngx_epoll_del_connection(ngx_connection_t *c, ngx_uint_t flags)   
   - if flags & NGX_CLOSE_EVENT, set c->write->active and c->read->active = 0 and return;
   - Otherwise, reset ee and set EPOLL_CTL_DEL and call epoll_ctl, finally we set c->write->active = c->read->active = 0         
* ngx_epoll_notify_init(ngx_log_t *log)
   - this function is called by ngx_epoll_init and it creates a new notfyfd using eventfd(0,0), see man eventfd, it seems like this is for use between main process and worker process?
   - register ngx_epoll_notify_handler and add this event into epoll set    
* ngx_epoll_notufy(ngx_event_handler_pt handler)
   - set notify_event.data = handler, call write to notify_fd and return; 
* ngx_epoll_notify_handler(ngx_event_t *ev)
   - call ev->data(ev)
* ngx_epoll_eventfd_handler(ngx_event_t *ev)
   - read ngx_eventfd and do error check, the return value should be 8 and we read value into 'ready' 
   - while ready is true, then we call io_getevents with 1 < events < 64 and timout value = 0
   - we use for loop for each event and we set event_t->complete = 1, active = 0 and ready = 1 and call ngx_post_event(event, &ngx_posted_events)     
* ngx_file_aio_read(ngx_file_t *file, u_char *buf, size_t size, off_t offset, ngx_pool_t *pool) 
   - this is the only function which uses io_submit in current search
   - initialize struct iocb (see man 3 aio) with IOCB_FLAG_RESFD (notify the completeion of this IO to ngx_eventfd) and set ev->handler = ngx_file_aio_event_handler
   - call io_submit using this initialzed iocb   
* ngx_http_commands => ngx_http_block => ngx_http_optimize_servers => ngx_http_init_listening => ngx_http_add_listening, ls->handler = ngx_http_init_connection => 
  ngx_event_process_init, for each listening socket we get connection and call add_event => ngx_epoll_process_events, ls->handler(c)   
* ngx_http_init_connection(ngx_connection_t *c)
   - set ngx_connection_t's data => c->data = hc (ngx_http_connection_t)
   - then this function try to get hc->addr_conf, it depends on the number of servers listening to this port, I think it wants to find the most appropriate server for this accept
   - do some setting on ngx_http_log_ctx_t, c->log and assign rev->handler = ngx_http_wait_request_handler, c->write->handler = ngx_http_empty_handler
   - if hc->addr_conf->http2, then rev->handler = ngx_http_v2_init, and #if NGX_HTTP_SSL we set hc->ssl = 1 and rev->handler = ngx_http_ssl_handshake
   - if rev->ready is set, directly called rev->handler or put rev into &ngx_posted_events and return;
   - otherwise we call ngx_event_add_timer with time = c->listening->post_accept_timeout ngx_event_add_timer set the timeout time as current time + wanted time interval and put it into timer rbtree
   - it calls ngx_reusasble_connection(c,1), 1 means reusable, and then call ngx_handle_read_event => if this rev is !ready and !active then we call ngx_add_event   
* ngx_http_ssl_handshake(ngx_event_t *rev)
   - if the timeout flag or close flag is set, we call ngx_http_close_connection
   - use recv to read the socket with MSG_PEEK flag
   - if hc->proxy_protocol = 1 we call ngx_proxy_protocol_read and then c->recv (ngx_unix_recv) to get proxy protocol content, and if n == size we call ngx_post_event
   - then if n == 1 (it will be 1 when no error occurs) and buf[0] equals to ssl keyword then we call ngx_ssl_create_connection, ngx_ssl_handshake, ngx_http_ssl_handshake_handler  
   - Otherwise we use plain http and call ngx_http_wait_request_handler
* ngx_ssl_create_connection(ngx_ssl_t *ssl, ngx_connection_t  *c, ngx_uint_t flags)
   - create ngx_ssl_connection_t sc and let c->ssl = sc, it seems like this function calls some SSL external library, SSL_new, SSL_set_fd, SSL_set_connect_state      
* ngx_ssl_handshake(ngx_connection_t *c)
   - Call SSL_do_handshake, and if the return value is 1
      * call ngx_handle_read_event, ngx_handle_write_event (why?)
      * set c->ssl->handshaked = 1, set c->recv = ngx_ssl_recv, c->send = ngx_ssl_write, c->recv_chain = ngx_ssl_recv_chain, ... and return with NGX_OK
   - the other part are error-handling code, it return NGX_AGAIN          
* ngx_http_ssl_handshake_handler(ngx_connection_t *c)
   - if c->ssl->handshake, we call ngx_http_v2_init or ngx_http_wait_request_handler   
